// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  firstname         String
  lastname          String?
  email             String   @unique
  password          String
  isAdmin           Boolean  @default(false)
  confirmationToken String?
  emailConfirmed    Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Order             Order[]
  Cart              Cart?
  Reviews           Review[]
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  price       Decimal      @db.Decimal(10, 2)
  stock       Int          @default(10)
  description String       @db.VarChar(600)
  image       String       @db.VarChar(255)
  Category    Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  OrderItems  OrderItems[]
  CartItem    CartItem[]
  Reviews     Review[]
  Images      Image[]
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Order {
  id              Int          @id @default(autoincrement())
  shippingAddress String
  city            String
  country         String
  zip             String
  phoneNumber     String
  status          String
  total           Decimal
  userId          Int?
  User            User?        @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  items           OrderItems[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now()) @updatedAt
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  productId Int
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  quantity  Int
  Order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Cart      Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  productId Int
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
